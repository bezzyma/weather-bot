# bot.py
import logging
import pytz
import datetime
import requests
import os
from telegram.ext import Updater, CommandHandler

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏ API-–∫–ª—é—á OpenWeather –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

# –ì–æ—Ä–æ–¥: (–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è OpenWeather, —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å)
cities = {
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É": ("Rostov-on-Don,ru", "Europe/Moscow"),
    "–ê–±–æ–≤—è–Ω": ("Abovyan,am", "Asia/Yerevan"),
    "–î–µ–Ω–∏—è": ("Denia,es", "Europe/Madrid")
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–≥–æ–¥—ã –ø–æ –∫–∞–∂–¥–æ–º—É –≥–æ—Ä–æ–¥—É
def get_time_and_weather():
    result = ""
    for display_name, (weather_city, tz) in cities.items():
        try:
            now = datetime.datetime.now(pytz.timezone(tz)).strftime("%H:%M")
            weather = get_weather(weather_city)
            result += f"üïí {display_name}: {now}\nüå§Ô∏è {weather}\n\n"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {display_name}: {e}")
            result += f"üïí {display_name}: {now}\nüå§Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã\n\n"
    return result

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –∏–∑ OpenWeather
def get_weather(city):
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url).json()
        if response.get("main"):
            temp = response["main"]["temp"]
            description = response["weather"][0]["description"]
            return f"{description.capitalize()}, {temp}¬∞C"
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {response.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return "–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")
        return "–ü–æ–≥–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update, context):
    try:
        message = get_time_and_weather()
        update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def daily_job(context):
    try:
        chat_id = context.job.context
        context.bot.send_message(chat_id=chat_id, text=get_time_and_weather())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–µ: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /daily
def set_daily_notification(update, context):
    try:
        chat_id = update.message.chat_id
        tz = pytz.timezone("Asia/Yerevan")
        now = datetime.datetime.now(tz)
        target = now.replace(hour=9, minute=0, second=0, microsecond=0)
        delay = (target - now).total_seconds()
        if delay < 0:
            delay += 86400  # –ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        context.job_queue.run_repeating(daily_job, interval=86400, first=delay, context=chat_id)
        update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –ø–æ –µ—Ä–µ–≤–∞–Ω—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /daily: {e}")
        update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("daily", set_daily_notification))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        updater.start_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        updater.idle()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
